#include <iostream>
using namespace std;

class Node {
public:
    string name;
    Node* next;

    Node(string name) {
        this->name = name;
        this->next = nullptr;
    }
};

class LinkedList {
private:
    Node* head;
    Node* tail;

public:
    LinkedList() {
        head = nullptr;
        tail = nullptr;
    }

    void insert_node(Node* new_node) {
        if (head == nullptr) {
            head = tail = new_node;
        } else {
            tail->next = new_node;
            tail = new_node;
        }
    }

    void delete_node(Node* target) {
        if (head == nullptr || target == nullptr) return;

        if (head == target) {
            head = head->next;
            if (target == tail) tail = nullptr;
            delete target;
            return;
        }

        Node* prev = head;
        while (prev->next != nullptr && prev->next != target) {
            prev = prev->next;
        }

        if (prev->next == nullptr) return;

        prev->next = target->next;
        if (target == tail) tail = prev;
        delete target;
    }

    void display_list() {
        Node* currNode = head;
        while (currNode != nullptr) {
            cout << currNode->name << " -> ";
            currNode = currNode->next;
        }
        cout << "NULL" << endl;
    }
};

int main() {
    Node* node1 = new Node("Ali");
    Node* node2 = new Node("Alice");
    Node* node3 = new Node("Ahmed");

    LinkedList std_names;

    std_names.insert_node(node1);
    std_names.insert_node(node2);
    std_names.insert_node(node3);

    cout << "Before deleting:\n";
    std_names.display_list();

    std_names.delete_node(node2);

    cout << "\nAfter deleting:\n";
    std_names.display_list();

    return 0;
}
