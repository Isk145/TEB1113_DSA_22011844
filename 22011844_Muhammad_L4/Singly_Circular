#include <iostream>
using namespace std;

class Node {
public:
    string name;
    Node* next;

    Node(string name) {
        this->name = name;
        this->next = nullptr;
    }
};

class CircularLinkedList {
private:
    Node* head;
    Node* tail;

public:
    CircularLinkedList() {
        head = nullptr;
        tail = nullptr;
    }

    void insert_node(Node* new_node) {
        if (head == nullptr) {
            head = tail = new_node;
            head->next = head; 
        } else {
            tail->next = new_node;
            new_node->next = head; 
            tail = new_node;
        }
    }

    void delete_node(Node* target) {
        if (head == nullptr or target == nullptr) return;

        if (head == target and head == tail) {
            delete target;
            head = tail = nullptr;
            return;
        }

        Node* curr = head;
        Node* prev = nullptr;

        do {
            if (curr == target) {
                if (curr == head) {
                    head = head->next;
                    tail->next = head;
                } else if (curr == tail) {
                    tail = prev;
                    tail->next = head;
                } else {
                    prev->next = curr->next;
                }
                delete curr;
                return;
            }
            prev = curr;
            curr = curr->next;
        } while (curr != head);
    }

    void display_list() {
        if (head == nullptr) {
            cout << "List is empty." << endl;
            return;
        }

        Node* curr = head;
        bool printed_head_twice = false;

        while (!printed_head_twice) {
            cout << curr->name << " -> ";
            curr = curr->next;

            if (curr == head) {
                if (printed_head_twice) break; 
                printed_head_twice = true;
            }
        }

        cout << head->name << " (back to head)" << endl;
    }
};

int main() {
    Node* node1 = new Node("Ali");
    Node* node2 = new Node("Alice");
    Node* node3 = new Node("Ahmed");
    Node* node4 = new Node("Hamzah");

    CircularLinkedList std_names;

    std_names.insert_node(node1);
    std_names.insert_node(node2);
    std_names.insert_node(node3);
    std_names.insert_node(node4);

    cout << "Before deleting:\n";
    std_names.display_list();

    std_names.delete_node(node2); 

    cout << "\nAfter deleting:\n";
    std_names.display_list();

    return 0;
}
